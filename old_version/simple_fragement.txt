#version 450

in vec3 view_direction;
in vec3 starting_point;

out vec4 color;

uniform sampler3D volume;

vec3 invLerp(vec3 from, vec3 to, vec3 value) {
  return (value - from) / (to - from);
}

vec3 remap(vec3 origFrom, vec3 origTo, vec3 targetFrom, vec3 targetTo, vec3 value){
  vec3 rel = invLerp(origFrom, origTo, value);
  return mix(targetFrom, targetTo, rel);
}

float sample_density(vec3 point){
    vec3 sample_pos = remap(vec3(-0.079) , vec3(0.079), vec3(0.0), vec3(1.0), point);
    return texture(volume, sample_pos).r;
}

void main(){
    int max_step = 300;
    vec3 step = view_direction * (1.0/512.0, 1.0/512.0, 1.0/245.0);
    vec3 pos = starting_point;

    color = vec4(0.0, 0.0, 0.0, 0.0);
    for(int i = 0; i < max_step; i++){
       pos = pos + step;
       float intensity = sample_density(pos);
       float prev_alpha = intensity - (intensity * color.a);
       color.rgb = prev_alpha * vec3(intensity) + color.rgb;
	   color.a += prev_alpha;
	   if(color.a > 0.99)
	        break;
    }
}