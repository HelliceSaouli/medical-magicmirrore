#version 450

out vec4 color;

layout (binding = 0) uniform sampler3D volume;
layout (binding = 1) uniform  sampler2D front;
layout (binding = 2) uniform  sampler2D back;
layout (binding = 3) uniform  sampler1D tranfer_function;

vec3 invLerp(vec3 from, vec3 to, vec3 value) {
  return (value - from) / (to - from);
}

vec3 remap(vec3 origFrom, vec3 origTo, vec3 targetFrom, vec3 targetTo, vec3 value){
  vec3 rel = invLerp(origFrom, origTo, value);
  return mix(targetFrom, targetTo, rel);
}

float transmittance(float distance, float sigma_a){
    return exp(-distance * sigma_a);
}

vec4 map_color(float density){
    return texture(tranfer_function, density);
}

float sample_dentiy(vec3 point){
    vec3 sample_pos = remap(vec3(-0.5) , vec3(0.5), vec3(0.0), vec3(1.0), point);
    return texture(volume, sample_pos).r;
}

void main(){
    vec3 front = texture(front,gl_FragCoord.xy / vec2(640, 480)).rgb;
    vec3 back  = texture(back,gl_FragCoord.xy / vec2(640, 480)).rgb;

    vec3 dir = normalize(back - front);
    float full_distance = length(back - front);

    vec3 pos = front;
    vec3 sample_distance = vec3(1/ 512.0, 1/512.0, 1/512.0);

    float step_size = length(sample_distance);
    float light_step_size = 0.001;

    vec3 light_color = vec3(0.2, 0.2, 0.2);
    vec3 light_dir   = vec3(0.0, 1.0, 1.0);

    color = vec4(0.0);

    float sigma_a = 0.03;
    float sigma_s = 0.2;
    float sigma_t = sigma_a + sigma_s;

    float transmittance = 1.0;
    float distance = 0.0;

    while (distance < full_distance){

        float sample_density = sample_dentiy(vec3(pos.x, pos.z, -pos.y));

        float segma = sample_density * sigma_t;
        float sample_att = transmittance(step_size, segma);

        transmittance *= sample_att;
        color.a = transmittance;

        float density_along_light_dir = 0.0;

        vec3 light_pos_sample = pos;
        for( int i = 0; i < 5; i++){
            density_along_light_dir += sample_dentiy(vec3(light_pos_sample.x, light_pos_sample.z, -light_pos_sample.y));
            light_pos_sample+= -light_dir * light_step_size;
        }

        float light_ray_att = transmittance(light_step_size, density_along_light_dir * sigma_t);

        color.rgb += (light_color * light_ray_att * sigma_s * sample_density  * transmittance);
        distance += step_size;
        pos += dir * step_size;
    }

    color.rgb += light_color * 0.1;
}