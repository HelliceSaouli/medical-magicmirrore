#version 450

out vec4 color;

layout (binding = 0) uniform sampler3D volume;
layout (binding = 1) uniform  sampler2D front;
layout (binding = 2) uniform  sampler2D back;
layout (binding = 3) uniform  sampler1D tranfer_function;

vec3 invLerp(vec3 from, vec3 to, vec3 value) {
  return (value - from) / (to - from);
}

vec3 remap(vec3 origFrom, vec3 origTo, vec3 targetFrom, vec3 targetTo, vec3 value){
  vec3 rel = invLerp(origFrom, origTo, value);
  return mix(targetFrom, targetTo, rel);
}

vec4 map_color(float density){
    return texture(tranfer_function, density);
}

float sample_dentiy(vec3 point){
    vec3 sample_pos = remap(vec3(-0.5) , vec3(0.5), vec3(0.0), vec3(1.0), point);
    return texture(volume, sample_pos).r;
}

vec3 estimate_gradient(vec3 point, float distance){

    vec3 grad = vec3(0.0);

    grad.x = sample_dentiy(point + vec3(distance, 0, 0)) - sample_dentiy(point - vec3(distance, 0, 0));
    grad.y = sample_dentiy(point + vec3(0, distance, 0)) - sample_dentiy(point - vec3(0, distance, 0));
    grad.z = sample_dentiy(point + vec3(0, 0, distance)) - sample_dentiy(point - vec3(0, 0, distance));

    grad /= (2.0 * distance);
    return grad;
}

vec3 compute_diffuse(vec3 kd, vec3 n, vec3 l, vec3 light_color){
    float cos_theta = max(dot(n, l), 0.0);
    return light_color * kd * cos_theta;
}

vec3 compute_specular(vec3 ks, vec3 n, vec3 l, vec3 v, float shine){
    vec3 h = normalize(v + l);
    float cos_theta = pow(max(dot(n, h), 0.0), shine);
    return ks * cos_theta;
}

vec3 compute_ambient(vec3 ka, vec3 light_color){
    return ka * light_color;
}

void main(){
    vec3 front = texture(front,gl_FragCoord.xy / vec2(640, 480)).rgb;
    vec3 back  = texture(back,gl_FragCoord.xy / vec2(640, 480)).rgb;

    vec3 dir = normalize(back - front);
    float full_distance = length(back - front);

    vec3 pos = front;
    //vec3 sample_distance = vec3(1/ 512.0, 1/512.0, 1/512.0);

    // float step_size = length(sample_distance);
    float step_size = 0.001;
    vec3 light_color = vec3(0.2, 0.2, 0.2);
    vec3 light_pos   = vec3(0.0, 20.0, -100.0);


    color = vec4(0.0);
    float distance = 0.0;

    while (distance < full_distance){

        vec3 light_dir = normalize(light_pos - pos);
        float denisty = sample_dentiy(vec3(pos.x, pos.z, -pos.y) + 0.0005);
        vec4 src = map_color(denisty);

        src.a = 1 - pow(1 - src.a,  1.0);
        if (src.a > 0.25){
        vec3 normal = estimate_gradient(vec3(pos.x, pos.z, -pos.y), 0.01);
        src.rgb = compute_diffuse(src.rgb, normal, light_dir,  light_color) +
                  compute_ambient(vec3(0.1, 0.1, 0.1), light_color);
        }
        src.rgb *= src.a;
        color = (1.0f - color.a)*src + color;

        if(color.a >= 0.95)
            break;

        distance += step_size;
        pos += dir * step_size;
    }
}